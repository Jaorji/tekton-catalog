apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: send-slack-task
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc - this is where the clone repository is stored
      - name: channel-name
        description: the Slack channel to send the message to
      - name: message
        description: the content to send to Slack
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: TOOLCHAIN_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: TOOLCHAIN_ID
  steps:
    - name: get-slack-integration
      image: ibmcom/pipeline-base-image
      workingDir: /artifacts
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          echo "Fetching token for $REPOSITORY"
          ibmcloud config --check-version false
          ibmcloud login -a $API -r $REGION --apikey $API_KEY
          TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
          echo "Doing curl ${API}/devops/toolchains/${TOOLCHAIN_ID}?env_id=ibm:yp:${REGION}"
          curl -s -X GET -o _toolchain.json -H "Accept: application/json" -H "Authorization: $TOKEN" "${API}/devops/toolchains/${TOOLCHAIN_ID}?env_id=ibm:yp:${REGION}"
          if jq '.services' _toolchain.json > /dev/null 2>&1; then
            echo "Found toolchain with id $TOOLCHAIN_ID in region $REGION"
          else
            echo "Toolchain with id $TOOLCHAIN_ID in region $REGION not found"
            exit 1
          fi
          cat _toolchain.json
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
    - name: send-message
      image: ibmcom/pipeline-base-image
      env:
        - name: SLACK_WEBHOOK
          value: $(inputs.params.slack-webhook)
      workingDir: /artifacts
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          echo "toto"
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)